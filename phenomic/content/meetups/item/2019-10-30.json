{"filename":"2019-10-30.md","date":"2019-10-30","title":"meetups/2019-10-30.md","edition":"88","host":"Datadog","sponsors":[],"meetupLink":"https://www.meetup.com/Paris-js/events/264722007/","talks":[{"title":"Tour d'horizon de Yarn 2!","extract":"Introduit il y a bientôt trois ans, Yarn s'est depuis lors taillé une solide place dans l'écosystème JavaScript grâce à sa mise au premier plan des problèmes de stabilité et de consistance. Il est maintenant temps de découvrir ce que Yarn 2 nous réserve, et vous dévoiler les prochaines étapes de notre plan visant à rendre vos applications plus stables, et vos cycles de développement plus abordables.\n","authors":[{"name":"Maël Nison","url":"https://twitter.com/arcanis","avatar":"https://api.microlink.io/?url=https://twitter.com/arcanis&amps;embed=image.url"}],"links":["https://github.com/yarnpkg/berry"],"videos":["https://youtu.be/U8eV3XGInRU"]},{"title":"Property based testing : de la théorie à la pratique","extract":"Apparu dans le monde fonctionnel avec QuickCheck, le property based testing est une nouvelle approche pour tester le bon fonctionnement d'une application.\nIl permet de détecter des bugs en quelques lignes sans avoir à spécifier l'ensemble des cas limites et s'avère être un allié puissant aux tests unitaires classiques.\nNous verrons ensemble ce qu'est le property based testing.\nPar la suite nous déroulerons plusieurs exemples d'application, basés sur le framework fast-check, allant du simple algorithme à l'interface graphique.\n","authors":[{"name":"Nicolas Dubien","url":"https://twitter.com/ndubien","avatar":"https://api.microlink.io/?url=https://twitter.com/ndubien&amps;embed=image.url"}],"slides":["https://dubzzz.github.io/fast-check.github.com/talks/meetup-typescript-04092018/property-based-testing.html"],"links":["https://github.com/dubzzz/fast-check/"],"videos":["https://youtu.be/lOnb50OpIec"]},{"title":"Un voyage de deux ans au coeur d’une application JS fullstack","extract":"En 2017, je commençais mon premier projet en tant que lead tech. A cette époque, je faisais mes premiers pas en react-native et j'étais accompagné de deux développeurs. Notre objectif: construire un POC en 4 semaines pour démontrer que nous pouvions déverrouiller une voiture à l’aide d’une application mobile codée en react-native.\n\nEn deux ans, cette équipe a fait beaucoup de chemin. Le POC est maintenant devenu une application complète permettant de visualiser la disponibilité de centaines de voitures dans Paris, elle est devenu le métier principal de notre client et l’équipe est maintenant composé de 10 développeurs. Cependant, cette évolution s'est accompagnée de nombreux défis: Des bugs, de la dette technique, des bugs, des ralentissements de l’équipe, des mauvaises conceptions architecturales faites par votre serviteur et ah oui, des bugs.\n\nNous avons appris beaucoup alors que nous cherchions à relever ces défis et j’aimerais partager nos apprentissages.\nVoici quelques sujets don’t nous parlerons pendant cette session :\n\nMonitorer les bugs sur une fullstack JS\nTyper le JS\nIndustrialiser: Marque blanche && intégration continue && déploiements automatisés de toute la stack\nTester fonctionnellement une application en react-native\n","authors":[{"name":"Maxime Sraiki","url":"https://twitter.com/MaximeSraiki","avatar":"https://api.microlink.io/?url=https://twitter.com/MaximeSraiki&amps;embed=image.url"}],"videos":["https://youtu.be/5Nzuyu0u6T4"]},{"title":"How to refactor your API without bugs using GraphQL and static type-checking","extract":"Is this field still used? Can I safely delete it? When refactoring an API, that's a question you can ask yourself. In this talk, I will show how Relay and static typing can help you refactor your GraphQL API quickly and without introducing defects.\n","authors":[{"name":"Bastien Duret","url":"https://twitter.com/bast0che","avatar":"https://api.microlink.io/?url=https://twitter.com/bast0che&amps;embed=image.url"}],"videos":["https://youtu.be/AzM1i8-hc2w"]}],"body":{"t":"div"}}